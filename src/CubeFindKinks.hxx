#ifndef CubeFindKinks_hxx_seen
#define CubeFindKinks_hxx_seen

#include <CubeAlgorithm.hxx>
#include <CubeAlgorithmResult.hxx>
#include <CubeHandle.hxx>

namespace Cube {
    class FindKinks;
};

/// Break clusters at kinks.  This accepts a input result with clusters that
/// have been constructed from the a spanning tree. The input clusters must
/// have the hits ordered according to the order in the minimal spanning tree
/// (e.g. they need to be generated by SpanningTree, or an equivalent).
/// The first and last hits each cluster correspond to the hits at the
/// branching points in the tree.  The hit at a branching point is in each
/// cluster associated with the branching point.  In "graph" language, the
/// clusters are (kind-of-like) the edges, and the end points of the clusters
/// (the duplicated hits) are (kind-of-like) the vertices.
///
/// A kink is roughly defined by a place where the cluster "bends". It's found
/// by scanning over the (ordered) hits and finding the place where a middle
/// hit is furthest from the line between the two end hits.
class Cube::FindKinks: public Cube::Algorithm {
public:
    FindKinks();
    virtual ~FindKinks() {}

    /// The routine that does the actual work.
    virtual Cube::Handle<Cube::AlgorithmResult>
    Process(const Cube::AlgorithmResult& in0,
            const Cube::AlgorithmResult& in1 = Cube::AlgorithmResult::Empty,
            const Cube::AlgorithmResult& in2 = Cube::AlgorithmResult::Empty);

    void SetScanLength(int i) {fScanLength = i;}

    void SetMinimumScanLength(int i) {
        fMinimumScanLength = i;
    }

    void SetKinkThreshold(double t) {fKinkThreshold = t;}

    void SetLengthFraction(double t) {fLengthFraction = t;}

private:
    // The length to be scanned for a kink.
    int fScanLength;

    // The minimum  number of hits  in the  scan window.  This  determines the
    // shortest possible cluster.
    int fMinimumScanLength;

    // The maximum distance from the end-point connecting line for an interior
    // it before there is a kink.
    double fKinkThreshold;

    // The maximum fraction of the end-to-end length from the connecting line
    // for an interior hit before there is a kink
    double fLengthFraction;

};
#endif

// Local Variables:
// mode:c++
// c-basic-offset:4
// compile-command:"$(git rev-parse --show-toplevel)/build/cube-build.sh force"
// End:
